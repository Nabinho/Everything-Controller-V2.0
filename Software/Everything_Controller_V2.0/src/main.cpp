/**************************************************************
 * Everything Controller (v2.0)
 *
 * Base code for the "Everything Controller V2.0" to send data to a receiver.
 * Communication is based on RF24 using the NRF24L01+ module. The controller
 * sends data from 8 digital buttons, 2 joysticks (2 X-axis and 2 Y-axis), 
 * two sliders, two rotary potentiometers and two rotary encoders. 
 * With this data, it is possible to control anything.
 *
 * Written by Giovanni de Castro (10/03/2024).
 *************************************************************/

// ********************** Project Libraries *******************
// Arduino framework
#include <Arduino.h>

// Redefinition from RF24 library for faster communication
#define RF24_SPI_SPEED 16000000

// NRF24L01 control libraries
#include <SPI.h>
#include <RF24.h>

// SSD1327 control libraries
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1327.h>

// Teensy ADC libraries
#include <ADC.h>
#include <ADC_util.h>

// Encoder library
#include <Encoder.h>
#include <Bounce2.h>

// ********************** Project Macros **********************
// Macro to disable or enable serial debugging
// #define DEBUG

// Controller pins definitions (Analog Inputs)
#define PIN_JXAL A6	 // Joystick X Axis Left
#define PIN_JYAL A7	 // Joystick Y Axis Left
#define PIN_JXAR A9	 // Joystick X Axis Right
#define PIN_JYAR A8	 // Joystick Y Axis Right
#define PIN_RPOTL A3 // Rotary Potentiometer Left
#define PIN_SPOTL A2 // Slider Potentiometer Left
#define PIN_RPOTR A1 // Rotary Potentiometer Right
#define PIN_SPOTR A0 // Slider Potentiometer Right

// Controller pins definitions (Battery Feedback Outputs)
#define PIN_VBAT A14 // Voltage Divider Battery Feedback

// Controller pins definitions (Digital Inputs)
#define PIN_JBTL 0	  // Joystick Button Left
#define PIN_JBTR 1	  // Joystick Button Right
#define PIN_EBTL 2	  // Encoder Button Left
#define PIN_EBTR 3	  // Encoder Button Right
#define PIN_ECLKL 4	  // Encoder CLK Left
#define PIN_EDTL 5	  // Encoder DT Left
#define PIN_EDTR 6	  // Encoder DT Right
#define PIN_ECLKR 7	  // Encoder CLK Right
#define PIN_MXBTEL 24 // Cherry MX Button Left
#define PIN_MXBTCL 33 // Cherry MX Button Center Left
#define PIN_MXBTER 31 // Cherry MX Button Right
#define PIN_MXBTCR 26 // Cherry MX Button Center Right
#define PIN_DIPER 29  // DIP Switch 1
#define PIN_DIPCR 30  // DIP Switch 2
#define PIN_DIPCL 28  // DIP Switch 3
#define PIN_DIPEL 27  // DIP Switch 4

// Controller pins definitions (LEDs Outputs)
#define PIN_LED1 25   // RF Message Feedback LED
#define PIN_LED2 32   // Battery Level Feedback LED

// NRF24L01 pins definitions
#define PIN_CE 9
#define PIN_CSN 10

// SSD1327 display Display definitions
#define DISPLAY_WIDTH 128
#define DISPLAY_HEIGHT 128
#define DISPLAY_ADDRESS 0x3D
#define DISPLYA_RESET -1

// ********************** Project Objects *********************
// Controller encoder objects
Encoder knob_left(PIN_ECLKL, PIN_EDTL);
Encoder knob_right(PIN_ECLKR, PIN_EDTR);

// Controller buttons objects
Bounce bounce_MXCL = Bounce();
Bounce bounce_MXEL = Bounce();
Bounce bounce_MXER = Bounce();
Bounce bounce_MXCR = Bounce();
Bounce bounce_EBL = Bounce();
Bounce bounce_EBR = Bounce();
Bounce bounce_JBL = Bounce();
Bounce bounce_JBR = Bounce();

// NRF24L01 control object
RF24 radio(PIN_CE, PIN_CSN);

// SSD1327 display control object
Adafruit_SSD1327 display(DISPLAY_WIDTH, DISPLAY_HEIGHT, &Wire, DISPLYA_RESET, 3400000);

// Teensy analog pins object
ADC *adc = new ADC();

// ********************** Project Variables *******************
// Radio address and channel
const uint8_t radio_CHANNEL = 71;
const uint8_t radio_ADDRESSES[2][6] = {{0xB6, 0xE9, 0x00, 0x7A, 0x43}, {0x10, 0xCA, 0x87, 0x3F, 0xD8}};
const bool radio_NUMBER = 0;

// Variables for failsafe and display update
bool message_acknowledged;
bool last_acknowledgement;

// Controller variables structure
typedef struct
{
	bool buttonMCL_reading = true;
	bool buttonMEL_reading = true;
	bool buttonMER_reading = true;
	bool buttonMCR_reading = true;
	bool buttonEL_reading = true;
	bool buttonER_reading = true;
	bool buttonJL_reading = true;
	bool buttonJR_reading = true;
	uint16_t XLaxis_reading = 0;
	uint16_t YLaxis_reading = 0;
	uint16_t XRaxis_reading = 0;
	uint16_t YRaxis_reading = 0;
	uint16_t sliderL_reading = 0;
	uint16_t sliderR_reading = 0;
	uint16_t rotaryL_reading = 0;
	uint16_t rotaryR_reading = 0;
	int8_t encoderL_reading = 0;
	int8_t encoderR_reading = 0;
} controller_variables;
controller_variables controller;

// Buttons readings variables
const uint8_t DEBOUNCE_INTERVAL = 5;
bool MX_latch[4] = {false, false, false, false};

// Battery feedback variables
const float VALUE_R1 = 51200.00;
const float VALUE_R2 = 16500.00;
float ADC_voltage = 0.0;
float battery_voltage = 0.0;
uint8_t battery_PWM = 0;
uint8_t battery_icon = 4;
uint8_t last_icon = 0;
bool battery_failsafe = false;
const float MINBAT_VOLTAGE = 6.4;

// Variables for battery reading timing
unsigned long last_batreading = 0;
const uint8_t BAT_INTERVAL = 100;
unsigned long last_batchange = 0;
const uint16_t BATCHANGE_INTERVAL = 5000;

// Flag to update the display
bool update_display = true;

// Encoders reading variables
int16_t new_position_left = 0;
int16_t new_position_right = 0;
int16_t last_position_left = 0;
int16_t last_position_right = 0;

// Variables for radio timings
unsigned long last_message = 0;
const uint8_t TX_INTERVAL = 2;
unsigned long last_message_sent = 0;
const uint16_t TX_TIMEOUT = 500;

// ********************** Display Icons ***********************
// My nickname icon
const unsigned char TURNIP_ICON[] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x07, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xfe,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xfe, 0x0f, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xfc, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x1f, 0x00, 0x03, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x00, 0x03,
	0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0x03, 0x83, 0x80, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0xc7, 0x83, 0x80, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x60, 0xcf, 0x07, 0x0f, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe1, 0xde, 0x0f,
	0x1f, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe1, 0xfc, 0x1e, 0x7e, 0x1f, 0x80, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0xe1, 0xff, 0x1c, 0xf0, 0x07, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0xe1, 0xff, 0x1c, 0xe0, 0x01, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe1, 0xe0, 0x1d,
	0xc0, 0x60, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe1, 0xe0, 0x1f, 0xc1, 0xe0, 0x07, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0xe1, 0xc0, 0x1f, 0x83, 0xe0, 0x03, 0x80, 0x00, 0x00, 0x00, 0x00,
	0x01, 0xe3, 0x80, 0x3f, 0x87, 0x8f, 0x03, 0x80, 0x00, 0x00, 0x00, 0x00, 0x03, 0xc7, 0x80, 0x78,
	0x0f, 0xff, 0x83, 0x80, 0x00, 0x00, 0x00, 0x00, 0x03, 0x87, 0x00, 0xf0, 0x1f, 0xff, 0x83, 0x80,
	0x00, 0x00, 0x00, 0x00, 0x03, 0x8e, 0x01, 0xe0, 0xff, 0xc0, 0x03, 0x80, 0x00, 0x00, 0x00, 0x00,
	0x03, 0x0e, 0x1f, 0xc3, 0xff, 0x00, 0x03, 0x80, 0x00, 0x00, 0x00, 0x00, 0x03, 0x1c, 0x3f, 0xcf,
	0xff, 0xe0, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x9c, 0x3f, 0xdf, 0x03, 0xf0, 0x7f, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x03, 0x98, 0x38, 0xfc, 0x00, 0x70, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x01, 0xf8, 0x70, 0xf8, 0x00, 0x01, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xf9, 0xf3, 0xf0,
	0x18, 0x07, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xe7, 0xf8, 0x7e, 0x0f, 0x80, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0x8f, 0x3f, 0xff, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x7e, 0x1e, 0x1f, 0xef, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0x3c, 0x03,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0xe0, 0xe0, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe1, 0xe0, 0x07,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe1, 0xc0, 0x07, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0xe3, 0x80, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0xe7, 0x00, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe7, 0x00, 0x7c,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xee, 0x00, 0xf8, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x03, 0xc0, 0x00, 0xee, 0x07, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xe0,
	0x80, 0xfc, 0x3f, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xe1, 0xf0, 0xfd, 0xff, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xf0, 0x01, 0xfc, 0x7f, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x1f, 0xf8, 0x00, 0x7f, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0x7c, 0x00,
	0x0f, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x1f, 0x00, 0x03, 0xfc, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x01, 0xe0, 0x07, 0xc0, 0x00, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x01, 0xc0, 0x03, 0xe0, 0x00, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x80, 0x00, 0xe0,
	0x00, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x07, 0xc0, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x01, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x1c, 0x03, 0x80, 0x70, 0x00, 0x00, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x1c, 0x3f, 0xf0, 0x7c, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1c, 0xff, 0xf8, 0x3e,
	0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1d, 0xf8, 0x3e, 0x0e, 0x00, 0x00, 0x07, 0x80,
	0x00, 0x00, 0x00, 0x00, 0x1f, 0xc0, 0x0e, 0x00, 0x00, 0x00, 0x03, 0x80, 0x00, 0x00, 0x00, 0x00,
	0x1f, 0x80, 0x07, 0x00, 0x00, 0x00, 0x01, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x00, 0x03, 0x00,
	0x00, 0x07, 0x01, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x1e, 0x00, 0x03, 0x80, 0x00, 0x07, 0xc0, 0xe0,
	0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x03, 0x80, 0x00, 0x03, 0xe0, 0xe0, 0x00, 0x00, 0x00, 0x00,
	0x0e, 0x04, 0x03, 0x80, 0x00, 0x00, 0xf8, 0x70, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x0f, 0x03, 0x80,
	0x00, 0x00, 0x7e, 0x70, 0x00, 0x00, 0x00, 0x00, 0x07, 0x07, 0xc3, 0x80, 0x00, 0x00, 0x1f, 0xf0,
	0x00, 0x00, 0x00, 0x00, 0x07, 0x83, 0xc3, 0x80, 0x00, 0x00, 0x07, 0xf0, 0x00, 0x00, 0x00, 0x00,
	0x03, 0x80, 0x83, 0x80, 0x00, 0x00, 0x01, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x01, 0xc0, 0x03, 0x80,
	0x00, 0x00, 0x00, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x01, 0xc0, 0x03, 0x80, 0x00, 0x00, 0x00, 0x38,
	0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x03, 0x80, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x70, 0x01, 0x80, 0x01, 0xff, 0x00, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0x01, 0xc0,
	0x0f, 0xff, 0xe0, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x01, 0xc0, 0x3f, 0xff, 0xf8, 0x30,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0xf1, 0xfe, 0x00, 0x7c, 0x70, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x7f, 0xf0, 0x00, 0x1e, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f,
	0xc0, 0x00, 0x0f, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x03, 0xe0,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x03, 0xe0, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x07, 0x00, 0x00, 0x00, 0x38, 0x01, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00,
	0x00, 0x3e, 0x01, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x80, 0x00, 0x00, 0x1f, 0x83, 0x80,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x80, 0x00, 0x00, 0x07, 0xc7, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x03, 0x80, 0x00, 0x00, 0x01, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00,
	0x00, 0x00, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xc0, 0x0f, 0xfc, 0x07, 0xf8, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xc1, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x01, 0xcf, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xe0,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};

// Battery icons
const unsigned char BATTERY_ICON1[] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff,
	0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xc0, 0x00, 0x00, 0x01, 0xc0, 0xc0, 0x00, 0x00, 0x01,
	0xc0, 0xc7, 0x8f, 0x3c, 0x79, 0xc0, 0xcf, 0x9f, 0x3e, 0x79, 0xc0, 0xcf, 0x9f, 0x3e, 0x79, 0xc0,
	0xcf, 0x9f, 0x3e, 0x79, 0xf0, 0xcf, 0x9f, 0x3e, 0x79, 0xf0, 0xcf, 0x9f, 0x3e, 0x79, 0xf0, 0xcf,
	0x9f, 0x3e, 0x79, 0xf0, 0xcf, 0x9f, 0x3e, 0x79, 0xc0, 0xcf, 0x9f, 0x3e, 0x79, 0xc0, 0xc7, 0x8f,
	0x3c, 0x79, 0xc0, 0xc0, 0x00, 0x00, 0x01, 0xc0, 0xc0, 0x00, 0x00, 0x01, 0xc0, 0xff, 0xff, 0xff,
	0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00};

const unsigned char BATTERY_ICON2[] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff,
	0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xc0, 0x00, 0x00, 0x01, 0xc0, 0xc0, 0x00, 0x00, 0x01,
	0xc0, 0xc7, 0x8f, 0x3c, 0x01, 0xc0, 0xcf, 0x9f, 0x3e, 0x01, 0xc0, 0xcf, 0x9f, 0x3e, 0x01, 0xc0,
	0xcf, 0x9f, 0x3e, 0x01, 0xf0, 0xcf, 0x9f, 0x3e, 0x01, 0xf0, 0xcf, 0x9f, 0x3e, 0x01, 0xf0, 0xcf,
	0x9f, 0x3e, 0x01, 0xf0, 0xcf, 0x9f, 0x3e, 0x01, 0xc0, 0xcf, 0x9f, 0x3e, 0x01, 0xc0, 0xc7, 0x8f,
	0x3c, 0x01, 0xc0, 0xc0, 0x00, 0x00, 0x01, 0xc0, 0xc0, 0x00, 0x00, 0x01, 0xc0, 0xff, 0xff, 0xff,
	0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00};

const unsigned char BATTERY_ICON3[] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff,
	0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xc0, 0x00, 0x00, 0x01, 0xc0, 0xc0, 0x00, 0x00, 0x01,
	0xc0, 0xc7, 0x8f, 0x00, 0x01, 0xc0, 0xcf, 0x9f, 0x00, 0x01, 0xc0, 0xcf, 0x9f, 0x00, 0x01, 0xc0,
	0xcf, 0x9f, 0x00, 0x01, 0xf0, 0xcf, 0x9f, 0x00, 0x01, 0xf0, 0xcf, 0x9f, 0x00, 0x01, 0xf0, 0xcf,
	0x9f, 0x00, 0x01, 0xf0, 0xcf, 0x9f, 0x00, 0x01, 0xc0, 0xcf, 0x9f, 0x00, 0x01, 0xc0, 0xc7, 0x8f,
	0x00, 0x01, 0xc0, 0xc0, 0x00, 0x00, 0x01, 0xc0, 0xc0, 0x00, 0x00, 0x01, 0xc0, 0xff, 0xff, 0xff,
	0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00};

const unsigned char BATTERY_ICON4[] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff,
	0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xc0, 0x00, 0x00, 0x01, 0xc0, 0xc0, 0x00, 0x00, 0x01,
	0xc0, 0xc7, 0x80, 0x00, 0x01, 0xc0, 0xcf, 0x80, 0x00, 0x01, 0xc0, 0xcf, 0x80, 0x00, 0x01, 0xc0,
	0xcf, 0x80, 0x00, 0x01, 0xf0, 0xcf, 0x80, 0x00, 0x01, 0xf0, 0xcf, 0x80, 0x00, 0x01, 0xf0, 0xcf,
	0x80, 0x00, 0x01, 0xf0, 0xcf, 0x80, 0x00, 0x01, 0xc0, 0xcf, 0x80, 0x00, 0x01, 0xc0, 0xc7, 0x80,
	0x00, 0x01, 0xc0, 0xc0, 0x00, 0x00, 0x01, 0xc0, 0xc0, 0x00, 0x00, 0x01, 0xc0, 0xff, 0xff, 0xff,
	0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00};

const unsigned char BATTERY_ICON5[] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff,
	0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xc0, 0x00, 0x00, 0x01, 0xc0, 0xc0, 0x00, 0x00, 0x01,
	0xc0, 0xc0, 0x00, 0x00, 0x01, 0xc0, 0xc0, 0x00, 0xc0, 0x01, 0xc0, 0xc0, 0x03, 0xc0, 0x01, 0xc0,
	0xc0, 0x0f, 0xc0, 0x01, 0xf0, 0xc0, 0x3f, 0xc0, 0x01, 0xf0, 0xc0, 0x00, 0xff, 0x01, 0xf0, 0xc0,
	0x00, 0xfc, 0x01, 0xf0, 0xc0, 0x00, 0xf0, 0x01, 0xc0, 0xc0, 0x00, 0xc0, 0x01, 0xc0, 0xc0, 0x00,
	0x00, 0x01, 0xc0, 0xc0, 0x00, 0x00, 0x01, 0xc0, 0xc0, 0x00, 0x00, 0x01, 0xc0, 0xff, 0xff, 0xff,
	0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00};

// Battery icons array
const unsigned char *BATTERY_ICONS[5] = {
	BATTERY_ICON1,
	BATTERY_ICON2,
	BATTERY_ICON3,
	BATTERY_ICON4,
	BATTERY_ICON5};

// Signal icons
const unsigned char SIGNAL_ICON1[] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x38, 0xff, 0x00, 0x1c, 0x7f, 0xe0, 0x1e,
	0x3f, 0xf8, 0x7f, 0x00, 0xfe, 0x7f, 0x80, 0x1e, 0x31, 0xc7, 0x0c, 0x03, 0xe3, 0xc0, 0x0f, 0xf1,
	0xf0, 0x0f, 0xb8, 0xf0, 0x06, 0x1c, 0x60, 0x00, 0x7e, 0x00, 0x01, 0xff, 0x00, 0x00, 0xff, 0x80,
	0x00, 0xc3, 0xc0, 0x00, 0x00, 0xe0, 0x00, 0x18, 0x70, 0x00, 0x18, 0x30, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};

const unsigned char SIGNAL_ICON2[] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x07, 0xff, 0xe0, 0x1f,
	0xff, 0xf8, 0x7f, 0x00, 0xfe, 0x78, 0x00, 0x1e, 0x30, 0xff, 0x0c, 0x03, 0xff, 0xc0, 0x0f, 0xff,
	0xf0, 0x0f, 0x81, 0xf0, 0x06, 0x00, 0x60, 0x00, 0x7e, 0x00, 0x01, 0xff, 0x80, 0x00, 0xff, 0x00,
	0x00, 0xc3, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};

// Signal icons array
const unsigned char *SIGNAL_ICONS[2] = {
	SIGNAL_ICON1,
	SIGNAL_ICON2};

// ********************** Project Configuration ***************
void setup()
{

	// Initializes serial communication if macro is enabled
#ifdef DEBUG
	Serial.begin(115200);
#endif

	// Initializes and configures the display
	display.begin(DISPLAY_ADDRESS);
	display.clearDisplay();
	display.display();

	// Initializes and configures the radio
	radio.begin();
	radio.setChannel(radio_CHANNEL);
	radio.setDataRate(RF24_2MBPS);
	radio.setPALevel(RF24_PA_MAX);
	radio.setPayloadSize(sizeof(controller));
	radio.openWritingPipe(radio_ADDRESSES[radio_NUMBER]);
	radio.openReadingPipe(1, radio_ADDRESSES[!radio_NUMBER]);
	radio.stopListening();

	// Configures Teensy ADC0
	adc->adc0->setReference(ADC_REFERENCE::REF_EXT);
	adc->adc0->setAveraging(32);
	adc->adc0->setResolution(12);
	adc->adc0->setConversionSpeed(ADC_CONVERSION_SPEED::VERY_HIGH_SPEED);
	adc->adc0->setSamplingSpeed(ADC_SAMPLING_SPEED::VERY_HIGH_SPEED);

	// Analog pins configuration
	pinMode(PIN_JXAL, INPUT_DISABLE);
	pinMode(PIN_JYAL, INPUT_DISABLE);
	pinMode(PIN_JXAR, INPUT_DISABLE);
	pinMode(PIN_JYAR, INPUT_DISABLE);
	pinMode(PIN_RPOTL, INPUT_DISABLE);
	pinMode(PIN_SPOTL, INPUT_DISABLE);
	pinMode(PIN_RPOTR, INPUT_DISABLE);
	pinMode(PIN_SPOTR, INPUT_DISABLE);
	pinMode(PIN_VBAT, INPUT_DISABLE);

	// Digital pins configuration
	bounce_MXEL.attach(PIN_MXBTEL, INPUT);
	bounce_MXCL.attach(PIN_MXBTCL, INPUT);
	bounce_MXER.attach(PIN_MXBTER, INPUT);
	bounce_MXCR.attach(PIN_MXBTCR, INPUT);
	bounce_EBL.attach(PIN_EBTL, INPUT);
	bounce_JBL.attach(PIN_JBTL, INPUT);
	bounce_EBR.attach(PIN_EBTR, INPUT);
	bounce_JBR.attach(PIN_JBTR, INPUT);

	// Debounce configuration
	bounce_MXCL.interval(DEBOUNCE_INTERVAL);
	bounce_MXEL.interval(DEBOUNCE_INTERVAL);
	bounce_MXER.interval(DEBOUNCE_INTERVAL);
	bounce_MXCR.interval(DEBOUNCE_INTERVAL);
	bounce_EBL.interval(DEBOUNCE_INTERVAL);
	bounce_JBL.interval(DEBOUNCE_INTERVAL);
	bounce_EBR.interval(DEBOUNCE_INTERVAL);
	bounce_JBR.interval(DEBOUNCE_INTERVAL);

	// DIP Switch pins configuration
	pinMode(PIN_DIPER, INPUT_PULLUP);
	pinMode(PIN_DIPCR, INPUT_PULLUP);
	pinMode(PIN_DIPCL, INPUT_PULLUP);
	pinMode(PIN_DIPEL, INPUT_PULLUP);

	// LEDs pins configuration
	pinMode(PIN_LED1, OUTPUT);
	pinMode(PIN_LED2, OUTPUT);
	digitalWrite(PIN_LED1, LOW);
	digitalWrite(PIN_LED2, LOW);

	// Encoders initial value configuration
	knob_left.write(last_position_left);
	knob_right.write(last_position_right);
}

// ********************** Project Configuration ***************
void loop()
{

	// ---------------------- Analog Readings ---------------------
	// Reads controller battery feedback
	if ((millis() - last_batreading) > BAT_INTERVAL)
	{
		ADC_voltage = (adc->adc0->analogRead(PIN_VBAT)) * 3.24 / adc->adc0->getMaxValue();
		battery_voltage = ADC_voltage / (VALUE_R2 / (VALUE_R1 + VALUE_R2));
		if (battery_voltage <= MINBAT_VOLTAGE)
		{
			battery_failsafe = true;
		}
		battery_PWM = map(battery_voltage, 6.6, 7.8, 0, 255);
		analogWrite(PIN_LED2, battery_PWM);
		battery_icon = map(battery_voltage, 6.6, 7.8, 4, 0);
		// "Debounce" necessary for voltage oscillation
		if (battery_icon != last_icon)
		{
			if ((millis() - last_batchange) > BATCHANGE_INTERVAL)
			{
				update_display = true;
				last_icon = battery_icon;
			}
		}
		else
		{
			last_batchange = millis();
		}
		last_batreading = millis();
	}

	// Reads controller joysticks axis
	controller.XLaxis_reading = adc->adc0->analogRead(PIN_JXAL);
	controller.YLaxis_reading = adc->adc0->analogRead(PIN_JYAL);
	controller.XRaxis_reading = adc->adc0->analogRead(PIN_JXAR);
	controller.YRaxis_reading = adc->adc0->analogRead(PIN_JYAR);

	// Reads controller potentiometers
	controller.sliderL_reading = adc->adc0->analogRead(PIN_SPOTL);
	controller.rotaryL_reading = adc->adc0->analogRead(PIN_RPOTL);
	controller.sliderR_reading = adc->adc0->analogRead(PIN_SPOTR);
	controller.rotaryR_reading = adc->adc0->analogRead(PIN_RPOTR);

	// ---------------------- Digital Readings --------------------
	// Reads DIP Switch pins
	MX_latch[0] = digitalRead(PIN_DIPEL);
	MX_latch[1] = digitalRead(PIN_DIPCL);
	MX_latch[2] = digitalRead(PIN_DIPER);
	MX_latch[3] = digitalRead(PIN_DIPCR);

	// Reads button from controller
	bounce_MXEL.update();
	if (bounce_MXEL.changed())
	{
		if (MX_latch[0] == LOW)
		{
			if (bounce_MXEL.read() == LOW)
			{
				controller.buttonMEL_reading = !controller.buttonMEL_reading;
			}
		}
		else
		{
			controller.buttonMEL_reading = bounce_MXEL.read();
		}
	}

	// Reads button from controller
	bounce_MXCL.update();
	if (bounce_MXCL.changed())
	{
		if (MX_latch[1] == LOW)
		{
			if (bounce_MXCL.read() == LOW)
			{
				controller.buttonMCL_reading = !controller.buttonMCL_reading;
			}
		}
		else
		{
			controller.buttonMCL_reading = bounce_MXCL.read();
		}
	}

	// Reads button from controller
	bounce_MXER.update();
	if (bounce_MXER.changed())
	{
		if (MX_latch[2] == LOW)
		{
			if (bounce_MXER.read() == LOW)
			{
				controller.buttonMER_reading = !controller.buttonMER_reading;
			}
		}
		else
		{
			controller.buttonMER_reading = bounce_MXER.read();
		}
	}

	// Reads button from controller
	bounce_MXCR.update();
	if (bounce_MXCR.changed())
	{
		if (MX_latch[3] == LOW)
		{
			if (bounce_MXCR.read() == LOW)
			{
				controller.buttonMCR_reading = !controller.buttonMCR_reading;
			}
		}
		else
		{
			controller.buttonMCR_reading = bounce_MXCR.read();
		}
	}

	// Reads button from controller
	bounce_EBL.update();
	if (bounce_EBL.changed())
	{
		controller.buttonEL_reading = bounce_EBL.read();
	}

	// Reads button from controller
	bounce_JBL.update();
	if (bounce_JBL.changed())
	{
		controller.buttonJL_reading = bounce_JBL.read();
	}

	// Reads button from controller
	bounce_EBR.update();
	if (bounce_EBR.changed())
	{
		controller.buttonER_reading = bounce_EBR.read();
	}

	// Reads button from controller
	bounce_JBR.update();
	if (bounce_JBR.changed())
	{
		controller.buttonJR_reading = bounce_JBR.read();
	}

	// Reads controller encoder position
	new_position_left = knob_left.read();
	if (new_position_left != last_position_left)
	{
		if (new_position_left < -180)
		{
			new_position_left = -180;
			knob_left.write(new_position_left);
		}
		if (new_position_left > 180)
		{
			new_position_left = 180;
			knob_left.write(new_position_left);
		}
		controller.encoderL_reading = new_position_left / 2;
		last_position_left = new_position_left;
	}

	// Reads controller encoder position
	new_position_right = knob_right.read();
	if (new_position_right != last_position_right)
	{
		if (new_position_right < -180)
		{
			new_position_right = -180;
			knob_right.write(new_position_right);
		}
		if (new_position_right > 180)
		{
			new_position_right = 180;
			knob_right.write(new_position_right);
		}
		controller.encoderR_reading = new_position_right / 2;
		last_position_right = new_position_right;
	}

	// ---------------------- Serial Debugging --------------------
#ifdef DEBUG
	Serial.print("Battery Voltage: ");
	Serial.print(ADC_voltage);
	Serial.println(" V");

	Serial.print("Joystick L: X - ");
	Serial.print(controller.XLaxis_reading);
	Serial.print(" | Y - ");
	Serial.println(controller.YLaxis_reading);

	Serial.print("Joystick R: X - ");
	Serial.print(controller.XRaxis_reading);
	Serial.print(" | Y - ");
	Serial.println(controller.YRaxis_reading);

	Serial.print("Potentiometers L: R - ");
	Serial.print(controller.rotaryL_reading);
	Serial.print(" | S - ");
	Serial.println(controller.sliderL_reading);

	Serial.print("Potentiometers R: R - ");
	Serial.print(controller.rotaryR_reading);
	Serial.print(" | S - ");
	Serial.println(controller.sliderR_reading);

	Serial.print("Buttons L: E - ");
	Serial.print(controller.buttonEL_reading);
	Serial.print(" | J - ");
	Serial.println(controller.buttonJL_reading);

	Serial.print("Buttons R: E - ");
	Serial.print(controller.buttonER_reading);
	Serial.print(" | J - ");
	Serial.println(controller.buttonJR_reading);

	Serial.print("Buttons MX L: CL - ");
	Serial.print(controller.buttonMCL_reading);
	Serial.print(" | EL - ");
	Serial.println(controller.buttonMEL_reading);

	Serial.print("Buttons MX R: CR - ");
	Serial.print(controller.buttonMCR_reading);
	Serial.print(" | ER - ");
	Serial.println(controller.buttonMER_reading);

	Serial.print("Encoders: L - ");
	Serial.print(controller.encoderL_reading);
	Serial.print(" | R - ");
	Serial.println(controller.encoderR_reading);
#endif

	// ---------------------- Radio Transmission ------------------
	// Sends the data structure to the receiver
	if (!battery_failsafe)
	{
		if ((millis() - last_message) > TX_INTERVAL)
		{

			// Sends the data and checks for acknowledgement
			message_acknowledged = radio.write(&controller, sizeof(controller));
			if (message_acknowledged)
			{
				// Updates and displays progress bars
				digitalWrite(PIN_LED1, !digitalRead(PIN_LED1));
				last_message_sent = millis();
			}
			else if ((millis() - last_message_sent) > TX_TIMEOUT)
			{
				digitalWrite(PIN_LED1, LOW);
			}
			if (last_acknowledgement != message_acknowledged)
			{
				update_display = true;
				last_acknowledgement = message_acknowledged;
			}
			last_message = millis();
		}

		// ---------------------- Display Update ----------------------
		// Shows battery and signal status
		if (update_display)
		{
			display.clearDisplay();
			display.drawBitmap(32, 0, BATTERY_ICONS[battery_icon], 36, 36, SSD1327_WHITE);
			display.drawBitmap(74, 6, SIGNAL_ICONS[message_acknowledged], 24, 24, SSD1327_WHITE);
			display.drawBitmap(18, 36, TURNIP_ICON, 92, 92, SSD1327_WHITE);
			display.display();
			update_display = false;
		}
	}
	else
	{
		digitalWrite(PIN_LED1, LOW);
		display.clearDisplay();
		display.display();
		while (1)
			;
	}
}
// ************************************************************
